generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DIRECT_URL")
}

model Store {
  id                   String                @id @default(uuid())
  name                 String
  domain               String                @unique
  accessToken          String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  adSpends             AdSpend[]
  adSpendIntegrations  AdSpendIntegration[]
  fixedCosts           FixedCost[]
  orders               Order[]
  paymentGateways      PaymentGateway[]
  products             Product[]
  shippingRules        ShippingRule[]
  variableCosts        VariableCost[]
}

model Product {
  id              String           @id @default(cuid())
  shopifyId       String?          @unique
  storeId         String
  title           String
  description     String?
  price           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sku             String?          @unique
  cost            Float
  shippingRuleId  String?
  weight          Float?
  costOfGoodsSold Float            @default(0)
  handlingFees    Float            @default(0)
  image           String?
  lastEdited      DateTime         @default(now())
  margin          Float            @default(0)
  miscFees        Float            @default(0)
  sellingPrice    Float            @default(0)
  status          String           @default("Active")
  costSource      String           @default("SHOPIFY")
  orders          Order[]
  orderItems      OrderItem[]
  shippingRule    ShippingRule?    @relation(fields: [shippingRuleId], references: [id])
  store           Store            @relation(fields: [storeId], references: [id])
  variants        ProductVariant[]

  @@index([storeId])
  @@index([shippingRuleId])
  @@index([shopifyId])
}

model ProductVariant {
  id              String    @id @default(cuid())
  productId       String
  title           String
  sku             String?
  price           Float
  cost            Float
  weight          Float?
  inventoryQty    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  costLastUpdated DateTime?
  costSource      String?   @default("SHOPIFY")
  orders          Order[]
  product         Product   @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ShippingRule {
  id          String    @id @default(cuid())
  storeId     String
  name        String
  baseRate    Float
  perItemRate Float
  weightRate  Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  products    Product[]
  store       Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model PaymentGateway {
  id            String   @id @default(cuid())
  storeId       String
  name          String
  fixedFee      Float
  percentageFee Float
  externalFee   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  store         Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Order {
  id                String         @id @default(cuid())
  storeId           String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  customerId        String?
  fulfillmentStatus String         @default("UNFULFILLED")
  status            String         @default("ACTIVE")
  adSpend           Float          @default(0)
  cost              Float
  price             Float
  productId         String
  quantity          Int
  externalFee       Float
  fixedFee          Float
  paymentGatewayId  String
  percentageFee     Float
  shippingCost      Float
  shippingRuleId    String
  variantId         String
  customer          Customer?      @relation(fields: [customerId], references: [id])
  paymentGateway    PaymentGateway @relation(fields: [paymentGatewayId], references: [id])
  product           Product        @relation(fields: [productId], references: [id])
  shippingRule      ShippingRule   @relation(fields: [shippingRuleId], references: [id])
  store             Store          @relation(fields: [storeId], references: [id])
  variant           ProductVariant @relation(fields: [variantId], references: [id])
  orderItems        OrderItem[]

  @@index([productId])
  @@index([variantId])
  @@index([storeId])
  @@index([customerId])
  @@index([shippingRuleId])
  @@index([paymentGatewayId])
}

model Customer {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model AdSpend {
  id         String   @id @default(uuid())
  storeId    String
  platform   String
  amount     Float
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  accountId  String
  campaignId String?
  lastSync   DateTime
  store      Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([platform, accountId])
}

model AdSpendIntegration {
  id           String    @id @default(uuid())
  storeId      String
  platform     String    // FACEBOOK, GOOGLE, TIKTOK, etc.
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  accountData  Json?     // Store platform-specific account information
  isActive     Boolean   @default(true)
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  store        Store     @relation(fields: [storeId], references: [id])

  @@unique([storeId, platform])
  @@index([storeId])
  @@index([platform])
}

model FixedCost {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  amount    Float
  category  String
  frequency String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model VariableCost {
  id             String    @id @default(uuid())
  storeId        String
  name           String
  amountPerOrder Float
  category       String
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  store          Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}
