generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DIRECT_URL")
}

model Store {
  id                              String               @id @default(uuid())
  name                            String
  domain                          String               @unique
  accessToken                     String
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  isActive                        Boolean              @default(true)
  isArchived                      Boolean              @default(false)
  adSpends                        AdSpend[]
  adSpendIntegrations             AdSpendIntegration[]
  additionalCosts                 AdditionalCost[]
  feeConfiguration                FeeConfiguration?
  fixedCosts                      FixedCost[]
  orders                          Order[]
  paymentGateways                 PaymentGateway[]
  paymentMethodFees               PaymentMethodFee[]
  products                        Product[]
  shippingRules                   ShippingRule[]
  shopifyOrders                   ShopifyOrder[]
  shopifyProducts                 ShopifyProduct[]
  subscriptionFees                SubscriptionFee[]
  syncStatuses                    SyncStatus[]
  User_User_currentStoreIdToStore User[]               @relation("User_currentStoreIdToStore")
  users                           User[]               @relation("UserStore")
  UserStoreAccess                 UserStoreAccess[]
  variableCosts                   VariableCost[]

  @@index([domain])
  @@index([isActive])
  @@index([isArchived])
}

model User {
  id                               String            @id @default(uuid())
  storeId                          String
  username                         String            @unique
  password                         String
  email                            String?
  firstName                        String?
  lastName                         String?
  role                             String
  isActive                         Boolean           @default(true)
  lastLoginAt                      DateTime?
  createdAt                        DateTime          @default(now())
  updatedAt                        DateTime          @updatedAt
  createdBy                        String?
  currentStoreId                   String?
  Store_User_currentStoreIdToStore Store?            @relation("User_currentStoreIdToStore", fields: [currentStoreId], references: [id])
  store                            Store             @relation("UserStore", fields: [storeId], references: [id])
  UserStoreAccess                  UserStoreAccess[]

  @@index([username])
  @@index([role])
  @@index([storeId])
  @@index([storeId, isActive])
  @@index([currentStoreId])
  @@index([isActive])
}

model Product {
  id              String           @id @default(cuid())
  storeId         String
  title           String
  description     String?
  price           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sku             String?          @unique
  cost            Float
  shippingRuleId  String?
  weight          Float?
  costOfGoodsSold Float            @default(0)
  handlingFees    Float            @default(0)
  image           String?
  lastEdited      DateTime         @default(now())
  margin          Float            @default(0)
  miscFees        Float            @default(0)
  sellingPrice    Float            @default(0)
  status          String           @default("Active")
  shopifyId       String?          @unique
  costSource      String           @default("SHOPIFY")
  orders          Order[]
  orderItems      OrderItem[]
  shippingRule    ShippingRule?    @relation(fields: [shippingRuleId], references: [id])
  store           Store            @relation(fields: [storeId], references: [id])
  variants        ProductVariant[]

  @@index([storeId])
  @@index([shippingRuleId])
  @@index([shopifyId])
}

model ProductVariant {
  id              String    @id @default(cuid())
  productId       String
  title           String
  sku             String?
  price           Float
  cost            Float
  weight          Float?
  inventoryQty    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  costLastUpdated DateTime?
  costSource      String?   @default("SHOPIFY")
  Order           Order[]
  product         Product   @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Order {
  id               String          @id @default(cuid())
  storeId          String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  status           String
  productId        String?
  shippingCost     Float           @default(0)
  costOfGoodsSold  Float           @default(0)
  customerEmail    String?
  customerName     String?
  margin           Float           @default(0)
  orderDate        DateTime?
  orderName        String?
  orderNumber      String?
  productVariantId String?
  profit           Float           @default(0)
  totalAmount      Float
  product          Product?        @relation(fields: [productId], references: [id])
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  store            Store           @relation(fields: [storeId], references: [id])
  orderItems       OrderItem[]

  @@index([storeId])
  @@index([productId])
  @@index([orderDate])
  @@index([productVariantId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model PaymentGateway {
  id            String   @id @default(uuid())
  storeId       String
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?
  isActive      Boolean  @default(true)
  processingFee Float
  store         Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model ShippingRule {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  condition String?
  cost      Float
  isActive  Boolean   @default(true)
  products  Product[]
  store     Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model FixedCost {
  id          String   @id @default(uuid())
  storeId     String
  name        String
  amount      Float
  frequency   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  isActive    Boolean  @default(true)
  store       Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model VariableCost {
  id          String   @id @default(uuid())
  storeId     String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  isActive    Boolean  @default(true)
  rate        Float
  type        String
  store       Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model AdSpend {
  id          String   @id @default(uuid())
  storeId     String
  platform    String
  amount      Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaign    String?
  description String?
  store       Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([date])
  @@index([platform])
}

model AdSpendIntegration {
  id           String    @id @default(uuid())
  storeId      String
  platform     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accountData  Json?
  errorMessage String?
  lastSyncAt   DateTime?
  store        Store     @relation(fields: [storeId], references: [id])

  @@unique([storeId, platform])
  @@index([storeId])
  @@index([platform])
  @@index([isActive])
}

model FeeConfiguration {
  id                    String   @id @default(cuid())
  storeId               String   @unique
  paymentGatewayRate    Float    @default(0.029)
  processingFeePerOrder Float    @default(0.30)
  defaultCogRate        Float    @default(0.30)
  chargebackRate        Float    @default(0.006)
  returnProcessingRate  Float    @default(0.005)
  overheadCostPerOrder  Float    @default(0.00)
  overheadCostPerItem   Float    @default(0.00)
  miscCostPerOrder      Float    @default(0.00)
  miscCostPerItem       Float    @default(0.00)
  usePaymentMethodFees  Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  store                 Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model AdditionalCost {
  id                 String   @id @default(uuid())
  storeId            String
  name               String
  percentagePerOrder Float    @default(0.00)
  percentagePerItem  Float    @default(0.00)
  flatRatePerOrder   Float    @default(0.00)
  flatRatePerItem    Float    @default(0.00)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  store              Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([storeId, isActive])
}

model SubscriptionFee {
  id            String   @id @default(uuid())
  storeId       String
  name          String
  billingType   String   @default("MONTHLY")
  monthlyAmount Float    @default(0.00)
  yearlyAmount  Float    @default(0.00)
  dailyRate     Float    @default(0.00)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  store         Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([storeId, isActive])
}

model ShopifyOrder {
  id                 String            @id
  storeId            String
  shopifyOrderNumber Int
  orderName          String
  email              String?
  createdAt          DateTime
  updatedAt          DateTime
  closedAt           DateTime?
  processedAt        DateTime?
  currency           String
  totalPrice         Float
  subtotalPrice      Float
  totalTax           Float
  totalDiscounts     Float
  totalShipping      Float
  totalRefunds       Float             @default(0)
  financialStatus    String
  fulfillmentStatus  String?
  customerFirstName  String?
  customerLastName   String?
  customerEmail      String?
  shippingFirstName  String?
  shippingLastName   String?
  shippingAddress1   String?
  shippingCity       String?
  shippingProvince   String?
  shippingCountry    String?
  shippingZip        String?
  gateway            String?
  processingMethod   String?
  paymentGateway     String?
  paymentSource      String?
  paymentMethod      String?
  transactionGateway String?
  tags               String?
  note               String?
  lastSyncedAt       DateTime          @default(now())
  lineItems          ShopifyLineItem[]
  store              Store             @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([createdAt])
  @@index([financialStatus])
  @@index([fulfillmentStatus])
  @@index([lastSyncedAt])
  @@index([paymentMethod])
}

model ShopifyLineItem {
  id                  String       @id
  orderId             String
  productId           String?
  variantId           String?
  title               String
  variantTitle        String?
  sku                 String?
  quantity            Int
  price               Float
  totalDiscount       Float
  productType         String?
  vendor              String?
  fulfillableQuantity Int          @default(0)
  fulfillmentService  String?
  order               ShopifyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model ShopifyProduct {
  id              String                  @id
  storeId         String
  title           String
  handle          String
  description     String?
  productType     String?
  vendor          String?
  tags            String?
  status          String                  @default("active")
  createdAt       DateTime
  updatedAt       DateTime
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  images          Json?
  lastSyncedAt    DateTime                @default(now())
  store           Store                   @relation(fields: [storeId], references: [id])
  variants        ShopifyProductVariant[]

  @@index([storeId])
  @@index([handle])
  @@index([status])
  @@index([lastSyncedAt])
}

model ShopifyProductVariant {
  id                  String         @id
  productId           String
  title               String
  sku                 String?
  price               Float
  compareAtPrice      Float?
  costPerItem         Float?
  inventoryQuantity   Int            @default(0)
  inventoryPolicy     String?
  inventoryManagement String?
  weight              Float?
  weightUnit          String?
  fulfillmentService  String?
  requiresShipping    Boolean        @default(true)
  taxable             Boolean        @default(true)
  options             Json?
  product             ShopifyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
}

model SyncStatus {
  id             String    @id @default(uuid())
  storeId        String
  dataType       String
  lastSyncAt     DateTime  @default(now())
  lastOrderId    String?
  lastProductId  String?
  lastCreatedAt  DateTime?
  syncInProgress Boolean   @default(false)
  lastHeartbeat  DateTime?
  timeframeDays  Int?
  totalRecords   Int       @default(0)
  errorMessage   String?
  store          Store     @relation(fields: [storeId], references: [id])

  @@unique([storeId, dataType])
  @@index([storeId])
  @@index([dataType])
}

model PaymentMethodFee {
  id             String   @id @default(cuid())
  storeId        String
  paymentMethod  String
  displayName    String
  percentageRate Float
  fixedFee       Float
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  store          Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, paymentMethod])
  @@index([storeId])
  @@index([paymentMethod])
}

model UserStoreAccess {
  id        String   @id
  userId    String
  storeId   String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  createdBy String?
  Store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@index([role])
  @@index([storeId])
  @@index([userId])
  @@index([userId, isActive])
}
