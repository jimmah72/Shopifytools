generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DIRECT_URL")
}

model Store {
  id                   String                @id @default(uuid())
  name                 String
  domain               String                @unique
  accessToken          String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  adSpends             AdSpend[]
  adSpendIntegrations  AdSpendIntegration[]
  fixedCosts           FixedCost[]
  orders               Order[]
  paymentGateways      PaymentGateway[]
  products             Product[]
  shippingRules        ShippingRule[]
  variableCosts        VariableCost[]
  feeConfiguration     FeeConfiguration?
  additionalCosts      AdditionalCost[]
  subscriptionFees     SubscriptionFee[]
  
  // Shopify data storage
  shopifyOrders        ShopifyOrder[]
  shopifyProducts      ShopifyProduct[]
  syncStatuses         SyncStatus[]
  paymentMethodFees    PaymentMethodFee[]
  
  // User management
  users                User[]
}

model Product {
  id              String           @id @default(cuid())
  shopifyId       String?          @unique
  storeId         String
  title           String
  description     String?
  price           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sku             String?          @unique
  cost            Float
  shippingRuleId  String?
  weight          Float?
  costOfGoodsSold Float            @default(0)
  handlingFees    Float            @default(0)
  image           String?
  lastEdited      DateTime         @default(now())
  margin          Float            @default(0)
  miscFees        Float            @default(0)
  sellingPrice    Float            @default(0)
  status          String           @default("Active")
  costSource      String           @default("SHOPIFY")
  orders          Order[]
  orderItems      OrderItem[]
  shippingRule    ShippingRule?    @relation(fields: [shippingRuleId], references: [id])
  store           Store            @relation(fields: [storeId], references: [id])
  variants        ProductVariant[]

  @@index([storeId])
  @@index([shippingRuleId])
  @@index([shopifyId])
}

model ProductVariant {
  id              String    @id @default(cuid())
  productId       String
  title           String
  sku             String?
  price           Float
  cost            Float
  weight          Float?
  inventoryQty    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  costLastUpdated DateTime?
  costSource      String?   @default("SHOPIFY")
  orders          Order[]
  product         Product   @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ShippingRule {
  id          String    @id @default(cuid())
  storeId     String
  name        String
  baseRate    Float
  perItemRate Float
  weightRate  Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  products    Product[]
  store       Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model PaymentGateway {
  id            String   @id @default(cuid())
  storeId       String
  name          String
  fixedFee      Float
  percentageFee Float
  externalFee   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  store         Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Order {
  id                String         @id @default(cuid())
  storeId           String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  customerId        String?
  fulfillmentStatus String         @default("UNFULFILLED")
  status            String         @default("ACTIVE")
  adSpend           Float          @default(0)
  cost              Float
  price             Float
  productId         String
  quantity          Int
  externalFee       Float
  fixedFee          Float
  paymentGatewayId  String
  percentageFee     Float
  shippingCost      Float
  shippingRuleId    String
  variantId         String
  customer          Customer?      @relation(fields: [customerId], references: [id])
  paymentGateway    PaymentGateway @relation(fields: [paymentGatewayId], references: [id])
  product           Product        @relation(fields: [productId], references: [id])
  shippingRule      ShippingRule   @relation(fields: [shippingRuleId], references: [id])
  store             Store          @relation(fields: [storeId], references: [id])
  variant           ProductVariant @relation(fields: [variantId], references: [id])
  orderItems        OrderItem[]

  @@index([productId])
  @@index([variantId])
  @@index([storeId])
  @@index([customerId])
  @@index([shippingRuleId])
  @@index([paymentGatewayId])
}

model Customer {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model AdSpend {
  id         String   @id @default(uuid())
  storeId    String
  platform   String
  amount     Float
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  accountId  String
  campaignId String?
  lastSync   DateTime
  store      Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([platform, accountId])
}

model AdSpendIntegration {
  id           String    @id @default(uuid())
  storeId      String
  platform     String    // FACEBOOK, GOOGLE, TIKTOK, etc.
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  accountData  Json?     // Store platform-specific account information
  isActive     Boolean   @default(true)
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  store        Store     @relation(fields: [storeId], references: [id])

  @@unique([storeId, platform])
  @@index([storeId])
  @@index([platform])
}

model FixedCost {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  amount    Float
  category  String
  frequency String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model VariableCost {
  id             String    @id @default(uuid())
  storeId        String
  name           String
  amountPerOrder Float
  category       String
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  store          Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model FeeConfiguration {
  id                          String   @id @default(cuid())
  storeId                     String   @unique
  paymentGatewayRate          Float    @default(0.029)  // 2.9%
  processingFeePerOrder       Float    @default(0.30)   // $0.30 per order
  defaultCogRate              Float    @default(0.30)   // 30%
  chargebackRate              Float    @default(0.006)  // 0.6%
  returnProcessingRate        Float    @default(0.005)  // 0.5%
  
  // Enhanced cost structure
  overheadCostPerOrder        Float    @default(0.00)   // $ per order
  overheadCostPerItem         Float    @default(0.00)   // $ per item
  miscCostPerOrder            Float    @default(0.00)   // $ per order
  miscCostPerItem             Float    @default(0.00)   // $ per item
  
  // NEW: Payment method-specific fee control
  usePaymentMethodFees        Boolean  @default(false)  // Toggle for payment method-specific fees
  
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  
  // Relationships
  store                       Store    @relation(fields: [storeId], references: [id])
  
  @@index([storeId])
}

model AdditionalCost {
  id                    String    @id @default(uuid())
  storeId               String
  
  name                  String    // User-defined fee name
  percentagePerOrder    Float     @default(0.00)    // Percentage per order
  percentagePerItem     Float     @default(0.00)    // Percentage per item
  flatRatePerOrder      Float     @default(0.00)    // Flat rate per order
  flatRatePerItem       Float     @default(0.00)    // Flat rate per item
  isActive              Boolean   @default(true)    // Active/inactive toggle
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  store                 Store     @relation(fields: [storeId], references: [id])
  
  @@index([storeId])
  @@index([storeId, isActive])
}

model SubscriptionFee {
  id                    String    @id @default(uuid())
  storeId               String
  
  name                  String    // User-defined subscription name
  billingType           String    @default("MONTHLY") // "MONTHLY" or "YEARLY"
  monthlyAmount         Float     @default(0.00)    // Monthly subscription amount
  yearlyAmount          Float     @default(0.00)    // Yearly subscription amount (alternative to monthly)
  dailyRate             Float     @default(0.00)    // Calculated daily rate for dashboard
  isActive              Boolean   @default(true)    // Active/inactive toggle
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  store                 Store     @relation(fields: [storeId], references: [id])
  
  @@index([storeId])
  @@index([storeId, isActive])
}

// New models for storing Shopify data locally
model ShopifyOrder {
  id                  String             @id // Use Shopify order ID directly
  storeId             String
  shopifyOrderNumber  Int
  orderName           String             // Display name like "#1001"
  email               String?
  createdAt           DateTime
  updatedAt           DateTime
  closedAt            DateTime?
  processedAt         DateTime?
  
  // Financial data
  currency            String
  totalPrice          Float
  subtotalPrice       Float
  totalTax            Float
  totalDiscounts      Float
  totalShipping       Float
  totalRefunds        Float              @default(0)
  
  // Status fields
  financialStatus     String
  fulfillmentStatus   String?
  
  // Customer data (simplified)
  customerFirstName   String?
  customerLastName    String?
  customerEmail       String?
  
  // Shipping address (simplified)
  shippingFirstName   String?
  shippingLastName    String?
  shippingAddress1    String?
  shippingCity        String?
  shippingProvince    String?
  shippingCountry     String?
  shippingZip         String?
  
  // Gateway info
  gateway             String?
  processingMethod    String?
  
  // NEW: Enhanced payment method tracking
  paymentGateway      String?            // shopify_payments, paypal, stripe, etc.
  paymentSource       String?            // web, pos, mobile, etc.
  paymentMethod       String?            // computed: gateway_source (e.g., "shopify_payments_web")
  transactionGateway  String?            // from transaction data
  
  // Metadata
  tags                String?
  note                String?
  
  // Relationships
  store               Store              @relation(fields: [storeId], references: [id])
  lineItems           ShopifyLineItem[]
  
  // Sync tracking
  lastSyncedAt        DateTime           @default(now())
  
  @@index([storeId])
  @@index([createdAt])
  @@index([financialStatus])
  @@index([fulfillmentStatus])
  @@index([lastSyncedAt])
  @@index([paymentMethod])  // NEW: Index for payment method queries
}

model ShopifyLineItem {
  id                String       @id // Use Shopify line item ID
  orderId           String
  productId         String?      // Shopify product ID
  variantId         String?      // Shopify variant ID
  
  title             String
  variantTitle      String?
  sku               String?
  quantity          Int
  price             Float
  totalDiscount     Float
  
  // Product details
  productType       String?
  vendor            String?
  
  // Fulfillment
  fulfillableQuantity Int @default(0)
  fulfillmentService  String?
  
  // Relationships
  order             ShopifyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model ShopifyProduct {
  id              String               @id // Use Shopify product ID
  storeId         String
  title           String
  handle          String
  description     String?
  productType     String?
  vendor          String?
  tags            String?
  status          String               @default("active")
  createdAt       DateTime
  updatedAt       DateTime
  publishedAt     DateTime?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Images (store as JSON for simplicity)
  images          Json?
  
  // Relationships
  store           Store                @relation(fields: [storeId], references: [id])
  variants        ShopifyProductVariant[]
  
  // Sync tracking
  lastSyncedAt    DateTime             @default(now())
  
  @@index([storeId])
  @@index([handle])
  @@index([status])
  @@index([lastSyncedAt])
}

model ShopifyProductVariant {
  id                String          @id // Use Shopify variant ID
  productId         String
  title             String
  sku               String?
  price             Float
  compareAtPrice    Float?
  costPerItem       Float?
  
  // Inventory
  inventoryQuantity Int             @default(0)
  inventoryPolicy   String?
  inventoryManagement String?
  
  // Physical properties
  weight            Float?
  weightUnit        String?
  
  // Fulfillment
  fulfillmentService String?
  requiresShipping  Boolean         @default(true)
  taxable           Boolean         @default(true)
  
  // Options (store as JSON)
  options           Json?
  
  // Relationships  
  product           ShopifyProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([sku])
}

model SyncStatus {
  id              String    @id @default(uuid())
  storeId         String
  dataType        String    // 'orders', 'products', 'customers', etc.
  lastSyncAt      DateTime  @default(now())
  lastOrderId     String?   // For order pagination
  lastProductId   String?   // For product pagination
  lastCreatedAt   DateTime? // For time-based pagination
  syncInProgress  Boolean   @default(false)
  lastHeartbeat   DateTime? // Timestamp updated during sync to detect stuck processes
  timeframeDays   Int?      // Track what timeframe the sync is running for
  totalRecords    Int       @default(0)
  errorMessage    String?
  
  store           Store     @relation(fields: [storeId], references: [id])
  
  @@unique([storeId, dataType])
  @@index([storeId])
  @@index([dataType])
}

// NEW: Payment method-specific fee configuration
model PaymentMethodFee {
  id                  String   @id @default(cuid())
  storeId             String
  paymentMethod       String   // e.g., "shopify_payments_web", "paypal_web", "stripe_web"
  displayName         String   // e.g., "Shopify Payments (Online)", "PayPal (Online)"
  percentageRate      Float    // e.g., 0.029 for 2.9%
  fixedFee            Float    // e.g., 0.30 for $0.30
  isActive            Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relationships
  store               Store    @relation(fields: [storeId], references: [id])
  
  @@unique([storeId, paymentMethod])
  @@index([storeId])
  @@index([paymentMethod])
}

// User management system
model User {
  id          String    @id @default(uuid())
  storeId     String
  username    String    @unique
  password    String    // Hashed password
  email       String?
  firstName   String?
  lastName    String?
  role        String    @default("VIEWER") // ADMIN, SELLER, VIEWER
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?   // ID of the admin who created this user
  
  // Relationships
  store       Store     @relation(fields: [storeId], references: [id])
  
  @@index([storeId])
  @@index([username])
  @@index([role])
  @@index([storeId, isActive])
}
