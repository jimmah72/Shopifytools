generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DIRECT_URL")
}

model Store {
  id                  String               @id @default(uuid())
  name                String
  domain              String               @unique
  accessToken         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  adSpends            AdSpend[]
  adSpendIntegrations AdSpendIntegration[]
  additionalCosts     AdditionalCost[]
  feeConfiguration    FeeConfiguration?
  fixedCosts          FixedCost[]
  orders              Order[]
  paymentGateways     PaymentGateway[]
  paymentMethodFees   PaymentMethodFee[]
  products            Product[]
  shippingRules       ShippingRule[]
  shopifyOrders       ShopifyOrder[]
  shopifyProducts     ShopifyProduct[]
  subscriptionFees    SubscriptionFee[]
  syncStatuses        SyncStatus[]
  users               User[]               @relation("UserStore")
  variableCosts       VariableCost[]
}

model User {
  id          String    @id @default(uuid())
  storeId     String
  username    String    @unique
  password    String
  email       String?
  firstName   String?
  lastName    String?
  role        String    @default("VIEWER")
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  store       Store     @relation("UserStore", fields: [storeId], references: [id])

  @@index([username])
  @@index([role])
  @@index([storeId])
  @@index([storeId, isActive])
}

model Product {
  id              String           @id @default(cuid())
  storeId         String
  title           String
  description     String?
  price           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sku             String?          @unique
  cost            Float
  shippingRuleId  String?
  weight          Float?
  costOfGoodsSold Float            @default(0)
  handlingFees    Float            @default(0)
  image           String?
  lastEdited      DateTime         @default(now())
  margin          Float            @default(0)
  miscFees        Float            @default(0)
  sellingPrice    Float            @default(0)
  status          String           @default("Active")
  shopifyId       String?          @unique
  costSource      String           @default("SHOPIFY")
  orders          Order[]
  orderItems      OrderItem[]
  shippingRule    ShippingRule?    @relation(fields: [shippingRuleId], references: [id])
  store           Store            @relation(fields: [storeId], references: [id])
  variants        ProductVariant[]

  @@index([storeId])
  @@index([shippingRuleId])
  @@index([shopifyId])
}

model ProductVariant {
  id              String    @id @default(cuid())
  productId       String
  title           String
  sku             String?
  price           Float
  cost            Float
  weight          Float?
  inventoryQty    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  costLastUpdated DateTime?
  costSource      String?   @default("SHOPIFY")
  Order           Order[]
  product         Product   @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Order {
  id                String         @id @default(cuid())
  storeId           String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  customerId        String?
  fulfillmentStatus String         @default("UNFULFILLED")
  status            String         @default("ACTIVE")
  adSpend           Float          @default(0)
  cost              Float
  price             Float
  productId         String
  quantity          Int
  externalFee       Float
  fixedFee          Float
  paymentGatewayId  String
  percentageFee     Float
  shippingCost      Float
  shippingRuleId    String
  variantId         String
  Customer          Customer?      @relation(fields: [customerId], references: [id])
  PaymentGateway    PaymentGateway @relation(fields: [paymentGatewayId], references: [id])
  product           Product        @relation(fields: [productId], references: [id])
  ShippingRule      ShippingRule   @relation(fields: [shippingRuleId], references: [id])
  store             Store          @relation(fields: [storeId], references: [id])
  ProductVariant    ProductVariant @relation(fields: [variantId], references: [id])
  orderItems        OrderItem[]

  @@index([storeId])
  @@index([productId])
  @@index([customerId])
  @@index([paymentGatewayId])
  @@index([shippingRuleId])
  @@index([variantId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model PaymentGateway {
  id            String   @id @default(uuid())
  storeId       String
  name          String
  fixedFee      Float
  percentageFee Float
  externalFee   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Order         Order[]
  store         Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model ShippingRule {
  id          String    @id @default(uuid())
  storeId     String
  name        String
  baseRate    Float
  perItemRate Float
  weightRate  Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Order       Order[]
  products    Product[]
  store       Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model FixedCost {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  amount    Float
  category  String
  frequency String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model VariableCost {
  id             String    @id @default(uuid())
  storeId        String
  name           String
  amountPerOrder Float
  category       String
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  store          Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model AdSpend {
  id         String   @id @default(uuid())
  storeId    String
  platform   String
  amount     Float
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  accountId  String
  campaignId String?
  lastSync   DateTime
  store      Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([platform, accountId])
  @@index([date])
}

model AdSpendIntegration {
  id           String    @id @default(uuid())
  storeId      String
  platform     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  accountData  Json?
  isActive     Boolean   @default(true)
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  store        Store     @relation(fields: [storeId], references: [id])

  @@unique([storeId, platform])
  @@index([storeId])
  @@index([platform])
}

model FeeConfiguration {
  id                    String   @id @default(cuid())
  storeId               String   @unique
  paymentGatewayRate    Float    @default(0.029)
  processingFeePerOrder Float    @default(0.30)
  defaultCogRate        Float    @default(0.30)
  chargebackRate        Float    @default(0.006)
  returnProcessingRate  Float    @default(0.005)
  overheadCostPerOrder  Float    @default(0.00)
  overheadCostPerItem   Float    @default(0.00)
  miscCostPerOrder      Float    @default(0.00)
  miscCostPerItem       Float    @default(0.00)
  usePaymentMethodFees  Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  store                 Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model AdditionalCost {
  id                 String   @id @default(uuid())
  storeId            String
  name               String
  percentagePerOrder Float    @default(0.00)
  percentagePerItem  Float    @default(0.00)
  flatRatePerOrder   Float    @default(0.00)
  flatRatePerItem    Float    @default(0.00)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  store              Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([storeId, isActive])
}

model SubscriptionFee {
  id            String   @id @default(uuid())
  storeId       String
  name          String
  billingType   String   @default("MONTHLY")
  monthlyAmount Float    @default(0.00)
  yearlyAmount  Float    @default(0.00)
  dailyRate     Float    @default(0.00)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  store         Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([storeId, isActive])
}

model ShopifyOrder {
  id                 String            @id
  storeId            String
  shopifyOrderNumber Int
  orderName          String
  email              String?
  createdAt          DateTime
  updatedAt          DateTime
  closedAt           DateTime?
  processedAt        DateTime?
  currency           String
  totalPrice         Float
  subtotalPrice      Float
  totalTax           Float
  totalDiscounts     Float
  totalShipping      Float
  totalRefunds       Float             @default(0)
  financialStatus    String
  fulfillmentStatus  String?
  customerFirstName  String?
  customerLastName   String?
  customerEmail      String?
  shippingFirstName  String?
  shippingLastName   String?
  shippingAddress1   String?
  shippingCity       String?
  shippingProvince   String?
  shippingCountry    String?
  shippingZip        String?
  gateway            String?
  processingMethod   String?
  paymentGateway     String?
  paymentSource      String?
  paymentMethod      String?
  transactionGateway String?
  tags               String?
  note               String?
  lastSyncedAt       DateTime          @default(now())
  lineItems          ShopifyLineItem[]
  store              Store             @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([createdAt])
  @@index([financialStatus])
  @@index([fulfillmentStatus])
  @@index([lastSyncedAt])
  @@index([paymentMethod])
}

model ShopifyLineItem {
  id                  String       @id
  orderId             String
  productId           String?
  variantId           String?
  title               String
  variantTitle        String?
  sku                 String?
  quantity            Int
  price               Float
  totalDiscount       Float
  productType         String?
  vendor              String?
  fulfillableQuantity Int          @default(0)
  fulfillmentService  String?
  order               ShopifyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model ShopifyProduct {
  id              String                  @id
  storeId         String
  title           String
  handle          String
  description     String?
  productType     String?
  vendor          String?
  tags            String?
  status          String                  @default("active")
  createdAt       DateTime
  updatedAt       DateTime
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  images          Json?
  lastSyncedAt    DateTime                @default(now())
  store           Store                   @relation(fields: [storeId], references: [id])
  variants        ShopifyProductVariant[]

  @@index([storeId])
  @@index([handle])
  @@index([status])
  @@index([lastSyncedAt])
}

model ShopifyProductVariant {
  id                  String         @id
  productId           String
  title               String
  sku                 String?
  price               Float
  compareAtPrice      Float?
  costPerItem         Float?
  inventoryQuantity   Int            @default(0)
  inventoryPolicy     String?
  inventoryManagement String?
  weight              Float?
  weightUnit          String?
  fulfillmentService  String?
  requiresShipping    Boolean        @default(true)
  taxable             Boolean        @default(true)
  options             Json?
  product             ShopifyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
}

model SyncStatus {
  id             String    @id @default(uuid())
  storeId        String
  dataType       String
  lastSyncAt     DateTime  @default(now())
  lastOrderId    String?
  lastProductId  String?
  lastCreatedAt  DateTime?
  syncInProgress Boolean   @default(false)
  lastHeartbeat  DateTime?
  timeframeDays  Int?
  totalRecords   Int       @default(0)
  errorMessage   String?
  store          Store     @relation(fields: [storeId], references: [id])

  @@unique([storeId, dataType])
  @@index([storeId])
  @@index([dataType])
}

model PaymentMethodFee {
  id             String   @id @default(cuid())
  storeId        String
  paymentMethod  String
  displayName    String
  percentageRate Float
  fixedFee       Float
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  store          Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, paymentMethod])
  @@index([storeId])
  @@index([paymentMethod])
}

model Customer {
  id        String   @id
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  Order     Order[]
}
